ARM Plugin for M-Build

Contents
--------
1. What is this?
2. What exactly does this provide?
3. How do I use it?
4. How does a customer use it?


1. What is this?
----------------
This is plugin for M-Build which adds support for the RVDS toolchain. Only a subset of the cores that are supported by RVDS are supported here, more may be added as needed but the intent is to support just the things that are in active use. When this plugin is used, it will allow a project to say that it supports various flavours of ARM cores, and then M-Build will generate Makefiles for these different flavours.

2. What exactly does this provide?
----------------------------------
This can provide targets for either Linux or baremetal builds. The baremetal builds will be compiled using "armcc" and linked with the "libc" that is shipped with that. The Linux builds will use "armcc" but the Codesourcery (or other gcc based) version of "libc".

Determining the set of processors to support is tricky. The "List of ARM microprocessor cores" page on wikipedia proved useful:

http://en.wikipedia.org/wiki/List_of_ARM_microprocessor_cores

From this list, the supported architectures were 
ARMv5TE, ARMv6, ARMv7-A
- MBuild_arm will create folders for following processors respectively: v5te, v6, cortex a8, cortex a9, cortex a15.

IDE supports:
rvds 4.1? support
DS-5 support


3. How do I use it?
-------------------
In your top level manifest, @import the mbuild_arm/manifest.mb file. Once you have done this, you can add ARM support to any project by using the "arm_support" symbol in a .project file. e.g. if you had:

my_project = ProjectSpec(
	actions=mbuild_compile_and_link,
	depends=[],
	build_configs=mbuild_standard,
)

You can change this to:

my_project = ProjectSpec(
	actions=mbuild_compile_and_link,
	depends=[],
	build_configs=mbuild_union(
                    mbuild_standard,
                    arm_support,
                  ),
)

And makefiles will be generated for all of the supported ARM cores.


4. How does a customer use it?
------------------------------
For building images in bare metal mode (for "rvbare") we require the the armcc compiler and related tools to be in your $PATH.

For building images for Linux, the machine which is doing the compiling needs to have an xml file with the options requried. This can be automatically generated by "armcc" with the right set of command line options.

Instructions for Linux:

% export CS_ROOT=/full/path/to/Sourcery_G++_Lite
% export CS_GCC_VERSION=4.5.2
% armcc --arm_linux_configure --arm_linux_config_file=arm_linux_config.xml --configure_sysroot=${CS_ROOT}/arm-none-linux-gnueabi/libc --configure_cpp_headers=${CS_ROOT}/arm-none-linux-gnueabi/include/c++/${CS_GCC_VERSION} --configure_extra_libraries=${CS_ROOT}/lib/gcc/arm-none-linux-gnueabi/${CS_GCC_VERSION},${CS_ROOT}/arm-none-linux-gnueabi/lib

Once you have generated this file (arm_linux_config.xml) you need to set the ARM_LINUX_CONFIG_FILE environment variable to point to it. 

% export ARM_LINUX_CONFIG_FILE=`pwd`/arm_linux_config.xml

Instructions for Windows/cygwin:

In a windows command prompt (adjust the two "set" lines if necessary):

% set CS_ROOT=C:\Tools\ARM\CodeSourcery\2009q3-67
% set CS_GCC_VERSION=4.5.2
% armcc --arm_linux_configure --arm_linux_config_file=arm_linux_config.xml --configure_sysroot="%CS_ROOT%\arm-none-linux-gnueabi\libc" --configure_cpp_headers="%CS_ROOT%\arm-none-linux-gnueabi\include\c++\%CS_GCC_VERSION%" --configure_extra_libraries="%CS_ROOT%\lib\gcc\arm-none-linux-gnueabi\%CS_GCC_VERSION%,%CS_ROOT%\arm-none-linux-gnueabi\lib"

For some people, it has been necessary to modify the resulting "arm_linux_config.xml" file to put another directory into the include path for .cpp files. This is done by modifying the .xml file, and placing the following line (modified if necessary) inside the <compiler_options> tag:

	<param guard="c++" inverse="false" name="-JC:\Tools\ARM\CodeSourcery\2009q3-67" />

Once you have a an arm_linux_config.xml file, you should modify your environment variables to set ARM_LINUX_CONFIG_FILE to point to the .xml file. This should be done using an absolute path, with all backslashes doubled so they are escaped. You can do this from the "Advanced" tab of the "System" control panel. 

For more information, see the ARM Compiler documentation:

http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0483c/CHDDFCCC.html

