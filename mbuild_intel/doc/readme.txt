Intel Plugin for M-Build

Contents
--------
1. What is this?
2. What exactly does this provide?
3. How do I use it?
4. How does a customer use it?


1. What is this?
----------------
This is plugin for M-Build which adds support for the Intel C/C++ Compiler.
When this plugin is used, M-Build will generate Makefiles for Windows, Linux and Mac OS using Intel compilers.

2. What exactly does this provide?
----------------------------------
This plugin consists of two seperate toolchains, one for use on Windows platforms and other one for use on Linux and Mac OS Platforms. This categorization into two seperate toolchains is  due to the fact that the compiler options are represented differently on Windows (with a "/") vs on Linux and Mac OS  (using a "-"), and also because some options are spelled out differently on these platforms.
Makefiles generated by M-Build for Windows would use the Intel Windows toolchain (icl) and for Linux and Mac would use the Intel Linux/Mac OS toolchain (icc).

The supported compiler versions are Intel C/C++ Compiler v12.3 (XE 2011 update 9) and beyond. This version has been fully tested with the makefiles generated by mbuild_intel on all platforms - Windows (32-bit and 64-bit), Linux (32-bit and 64-bit) and Mac (32-bit and 64-bit).
It should work for older updates of XE 2011 as well.
Intel compiler v11.1 has some known issues with the plugin.

On Windows, the Intel's linker and archiver calls the Microsoft Visual Studio linker and archiver respectively.
On Linux and Mac,the Intel's linker and archiver calls the GCC linker and archiver respectively.

For icl toolchain, tools used are the following:
Compiler : icl
Linker : xilink (calls Microsoft Visual Studio 2010's 'link') 
Archiver : xilib (calls Microsoft Visual Studio 2010's 'lib') 

For icc toolchain, tools used are the following: 
Compiler : icc
Linker : icc (calls GNU's 'gcc')
Archiver : xiar (calls GNU's 'ar')

To be done for next update to this plugin:
- Add support for generating makefiles which would build Universal libraries for Mac (fat libraries - combined 32-bit and 64-bit binaries)

3. How do I use it?
-------------------
In your top level manifest, @import the mbuild_intel/manifest.mb file. Once you have done this, you can add Intel support to any project by using the "intel_support" symbol in a .project file. e.g. if you had:

my_project = ProjectSpec(
	actions=mbuild_compile_and_link,
	depends=[],
	build_configs=mbuild_standard,
)

You can change this to:

my_project = ProjectSpec(
	actions=mbuild_compile_and_link,
	depends=[],
	build_configs=mbuild_union(
                    mbuild_standard,
                    intel_support,
                  ),
)

And makefiles will be generated for all of the supported OSes and processors.

4. How does a customer use it?
------------------------------
For building a generated makefile for a particular OS, the environment needs to be set before invoking the Intel compiler.
* For building on Windows 32-bit OS (Using Intel compiler's 32-bit tools) :
 	* Run "iclvars.bat" from Intel compiler's "bin" directory with arguments "ia32" and "vs2010"
	e.g. C:\Program Files\Intel\Composer XE 2011 SP1\bin\iclvars.bat ia32 vs2010
* For building on Windows 64-bit OS (Using Intel compiler's 64-bit tools) :
	* Run "iclvars.bat" from Intel compiler's "bin" directory with arguments "intel64" and "vs2010"
	e.g. C:\Program Files(x86)\Intel\Composer XE 2011 SP1\bin\iclvars.bat intel64 vs2010
* For building on Linux 32-bit or Mac 32-bit (Using Intel compiler's 32-bit tools) :
	* Run "source" command on "compilervars.sh" from Intel compiler's "bin" directory with arguments "ia32"
	e.g. On Linux : source /home/dsp-tools/linux/intel/xe-2011/composerxe/bin/compilervars.sh ia32
	e.g. On Mac : source /developer/opt/intel/composer_xe_2011_sp1/bin/compilervars.sh ia32
* For building on Linux 64-bit or Mac 64-bit (Using Intel compiler's 64-bit tools) :
	*  Run "source" command on "compilervars.sh" from Intel compiler's "bin" directory with arguments "intel64"
	e.g. On Linux : source /home/dsp-tools/linux/intel/xe-2011/composerxe/bin/compilervars.sh intel64
	e.g. On Mac : source /developer/opt/intel/composer_xe_2011_sp1/bin/compilervars.sh intel64

Ability to link with static or dynamic run-time library is not added by default, whereas this functionality is fully supported by the Intel plugin.
In order to do so, we would be required to include (by means of @add) specific keywords in manifest files for a particular project.
"toolchain_dynamic_runtime" : To link against multithread dynamic version (DLL) of run-time library
"toolchain_static_runtime" : To link against multithread static version of run-time library
"intel_toolchain_dynamic_runtime" : Causes Intel-provided C++ libraries to be linked in dynamically
"intel_toolchain_static_runtime" : Causes Intel-provided C++ libraries to be linked in statically,with the exception of libguide,which is linked in dynamically

In order to control the semantics of floating-point calculations, add (by means of @add) either of these keywords in the manifest files for a particular project.
"fp_semantics_fast" : Enables more aggressive optimizations on floating-point data (Specifying fast is the same as specifying fast=1)
"fp_semantics_fast2" : 'This may produce faster and less accurate results than fp_semantics_fast
"fp_semantics_precise" : This  enables value-safe optimizations on floating-point data'
"fp_semantics_strict" : This enables precise and except, disables contractions, and enables pragma stdc fenv_access
"fp_semantics_source" : This rounds intermediate results to source-defined precision and enables value-safe optimizations
"fp_semantics_double" : This rounds intermediate results to 53-bit (double) precision
"fp_semantics_extended" : This rounds intermediate results to 64-bit (extended) precision
"fp_semantics_except" : Determines whether floating-point exception semantics are used

In order to Disable Language Extensions, add the keyword "use_strict_language" in the manifest files for a particular project. Adding this keyword defines the Intel compiler flag "/Za" for the Windows tool-chain (icl), which emits an error for language constructs that are not compatible with either ANSI C or ANSI C++.



